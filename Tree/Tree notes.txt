#include <iostream>
#include <string>
#include <cmath> //cmath for ceil and floor functions tan of an angle also
#include <algorithm>
#include <iomanip>//for setprecision//    fixed<<////setprecision(value upto you want to precise)<<variable name;////
#include <vector>
#include<numeric>
#include <set> // to work with sets
#include <cstdlib>
#include <map>
#include <stdio.h>// for bitwise operators
#include <stdlib.h>
#include <unordered_set>
#include <math.h>// for pow() function
#include <queue>

using namespace std;
typedef long long ll;

// Tree
// Binary tree is a tree in which every node has 2 children except the leaf node 
// In Binary search tree left node is always less than the root and right node is greater than its root. 
struct Bstnode {
	int data;
	Bstnode* left;
	Bstnode* right;
};
Bstnode* root = nullptr;
Bstnode* makeNewNode(int data) {
	Bstnode* newnode = new Bstnode();
	newnode -> data = data;
	newnode -> left = nullptr;
	newnode ->right = nullptr;
	return newnode;
}

Bstnode* insert (Bstnode* root, int data) {
	if (root == nullptr) {
		root = makeNewNode(data);
	}
	else if (root -> data <= data) {
		root -> right = insert (root -> right, data);
	}
	else {
		root -> left = insert (root ->left, data);
	}
	return root;
}

bool search(Bstnode* root, int data) {
	if (root == nullptr) {
		return false;
	}
	else if (data == root -> data) {
		return true;
	}
	else if (data >= root -> data) {
		return search (root -> right, data);
	}
	else {
		return search (root -> left, data);
	}
}

void Preorder (Bstnode* root) {
	if (root == nullptr)  return;
	cout << root -> data << " ";
	Preorder (root -> left);
	Preorder (root -> right);
}

void Inorder (Bstnode* root) {
	if (root == nullptr)  return;
	Inorder (root -> left);
	cout << root -> data << " ";
	Inorder (root -> right);
}
void Postorder (Bstnode* root) {
	if (root == nullptr)  return;
	Postorder (root -> left);
	Postorder (root -> right);
	cout << root -> data << " ";
}

// Important one
//Level order Transversal in Trees

int main () {
	Bstnode* root = nullptr;
	root = insert (root, 11);
	root = insert (root, 12);
	root = insert (root, 3);
	Inorder(root);
	cout << endl;
	Postorder(root);
	cout << endl;
	Preorder(root);
	cout << endl;

	return 0;
}
